# Build stage
FROM node:18-alpine AS builder

# Install dependencies only when needed
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    postgresql-client \
    python3 \
    make \
    g++ \
    curl

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install dependencies and sharp for image optimization
RUN npm ci && npm install sharp

# Copy source files
COPY . .

# Set environment variables for build time
ENV NEXT_TELEMETRY_DISABLED=1
ENV SKIP_ENV_VALIDATION=1
ENV SKIP_CLEANUP=true
ENV DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy?schema=public"
ENV HOST=0.0.0.0
ENV NEXT_PUBLIC_API_URL=http://localhost:3000

# Generate Prisma Client during build with explicit binary targets and caching
RUN --mount=type=cache,target=/app/.prisma/client \
    npx prisma generate --generator client { \
    provider = "prisma-client-js", \
    binaryTargets = [ \
        "native", \
        "linux-arm64-openssl-1.1.x", \
        "linux-arm64-openssl-3.0.x", \
        "linux-musl-openssl-3.0.x", \
        "linux-musl", \
        "debian-openssl-1.1.x", \
        "debian-openssl-3.0.x", \
        "linux-arm64-openssl-1.1.x" \
    ] \
}

# Build application
RUN npm run build

# Remove dev dependencies and unnecessary packages, but keep sharp
RUN npm prune --production && \
    npm install sharp && \
    rm -rf node_modules/@types && \
    rm -rf node_modules/typescript && \
    rm -rf node_modules/prettier && \
    rm -rf node_modules/eslint* && \
    rm -rf node_modules/postcss && \
    rm -rf node_modules/tailwindcss && \
    rm -rf .next/cache

# Production stage - using minimal Alpine
FROM node:18-alpine AS runner

# Install only the necessary system packages and create user
RUN apk add --no-cache \
    postgresql-client \
    curl \
    wget && \
    addgroup -S -g 1001 nodejs && \
    adduser -S -u 1001 -G nodejs nextjs && \
    mkdir -p /app/uploads && \
    chown -R nextjs:nodejs /app

WORKDIR /app

# Copy only the necessary files
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json

# Copy initialization script
COPY --chown=nextjs:nodejs scripts/initialize-data.js ./scripts/initialize-data.js

# Switch to non-root user
USER nextjs

# Add application and database healthchecks with improved configuration
HEALTHCHECK --interval=10s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Set production environment variables
ENV NODE_ENV=production
ENV PORT=3000
ENV NEXT_TELEMETRY_DISABLED=1
ENV HOST=0.0.0.0
ENV NEXT_PUBLIC_API_URL=http://localhost:3000

# Create volume mount points with proper permissions
VOLUME ["/app/uploads", "/app/data"]
RUN chown -R nextjs:nodejs /app/uploads /app/data

EXPOSE 3000

# Copy entrypoint script
COPY --chown=nextjs:nodejs docker-entrypoint.sh ./
RUN chmod +x docker-entrypoint.sh

ENTRYPOINT ["./docker-entrypoint.sh"]
