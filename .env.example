# Development Environment Configuration

# Application Settings
NODE_ENV=development
PORT=3000
NEXT_TELEMETRY_DISABLED=1

# Database Configuration
DB_HOST=db           # Use 'db' for Docker development, 'localhost' for direct local development
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=change_this_to_a_secure_password
DB_DATABASE=tgeld

# Database Connection URL (used by Prisma)
DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}?schema=public

# File Storage
UPLOAD_PATH=/app/uploads  # Maps to container path for Docker

# Feature Flags
ENABLE_ANALYTICS=false
ENABLE_BACKUP=true

# Security Settings
SESSION_SECRET=change_this_to_a_secure_random_string

# ==============================================
# Docker Development Setup Instructions
# ==============================================
#
# 1. Copy this file: cp .env.example .env
# 2. Update passwords and secrets with secure values
# 3. Keep DB_HOST=db for Docker development
# 4. The UPLOAD_PATH will be mounted in the container
#
# Security Requirements:
# 1. Never commit .env files to version control
# 2. Password Requirements:
#    - Minimum 12 characters
#    - Mix of uppercase and lowercase letters
#    - Include numbers and special characters
#    - Avoid characters that need URL escaping
#
# Docker Volume Management:
# - Database data is persisted in a named volume: postgres_dev_data
# - Uploads are mounted from the host system
# - Node modules and Next.js build cache use anonymous volumes
#
# Health Checks:
# - Application health endpoint: http://localhost:${PORT}/api/health
# - Database health is monitored automatically