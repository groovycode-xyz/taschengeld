name: Auto Version Bump

on:
  push:
    branches: [main]
    paths-ignore:
      - 'version.txt'
      - '.github/workflows/auto-version.yml'
      - '.github/workflows/version-release.yml'
      - 'README.md'
      - 'docs/**'
      - '.archive/**'

permissions:
  contents: write
  actions: write # Required to trigger other workflows

jobs:
  version-bump:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Check if version bump needed
        id: check
        run: |
          # Get the commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Skip if commit is from bot (to prevent loops)
          if [[ "$COMMIT_MSG" == *"[bot]"* ]] || [[ "$COMMIT_MSG" == *"Bump version"* ]]; then
            echo "Skip version bump for bot commits"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Determine version increment
        if: steps.check.outputs.skip != 'true'
        id: increment
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Default to patch
          INCREMENT="patch"

          # Check commit message for version hints
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"[major]"* ]]; then
            INCREMENT="major"
          elif [[ "$COMMIT_MSG" == *"[minor]"* ]] || [[ "$COMMIT_MSG" == *"feat:"* ]] || [[ "$COMMIT_MSG" == *"feat("* ]]; then
            INCREMENT="minor"
          fi

          echo "increment=$INCREMENT" >> $GITHUB_OUTPUT
          echo "Version increment type: $INCREMENT"

      - name: Bump version
        if: steps.check.outputs.skip != 'true'
        id: version
        run: |
          # Read current version
          CURRENT_VERSION=$(cat version.txt)
          echo "Current version: $CURRENT_VERSION"

          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Increment based on type
          case "${{ steps.increment.outputs.increment }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          # Create new version
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"

          # Update version.txt
          echo "$NEW_VERSION" > version.txt

          # Output for next steps
          echo "old_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version bump
        if: steps.check.outputs.skip != 'true'
        run: |
          git add version.txt
          git commit -m "ðŸ”– Bump version from ${{ steps.version.outputs.old_version }} to ${{ steps.version.outputs.new_version }} [bot]"
          git push

      - name: Trigger release workflow
        if: steps.check.outputs.skip != 'true'
        run: |
          echo "Version bumped to ${{ steps.version.outputs.new_version }}"
          echo "Triggering release workflow..."

          # Wait a moment for the commit to be fully processed
          sleep 5

          # Explicitly trigger the version-release workflow
          gh workflow run version-release.yml --ref main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
