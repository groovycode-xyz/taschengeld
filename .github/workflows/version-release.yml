name: Auto Release on Version Change

on:
  push:
    branches: [main]
    paths:
      - 'version.txt'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need to fetch previous commit to compare

      - name: Check if version changed
        id: version_check
        run: |
          # Get current version
          CURRENT_VERSION=$(cat version.txt 2>/dev/null || echo "1.0.0")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Get previous version (from previous commit)
          PREVIOUS_VERSION=$(git show HEAD~1:version.txt 2>/dev/null || echo "1.0.0")
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT

          # Check if version changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
            echo "Version unchanged: $CURRENT_VERSION"
          fi

      - name: Check if release exists
        if: steps.version_check.outputs.VERSION_CHANGED == 'true'
        id: release_check
        run: |
          # Check if a release already exists for this version
          if gh release view "v${{ steps.version_check.outputs.CURRENT_VERSION }}" >/dev/null 2>&1; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version_check.outputs.CURRENT_VERSION }} already exists"
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version_check.outputs.CURRENT_VERSION }} does not exist"
          fi

      - name: Get commit messages
        if: steps.version_check.outputs.VERSION_CHANGED == 'true' && steps.release_check.outputs.RELEASE_EXISTS == 'false'
        id: commits
        run: |
          # Get commits since last version tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            echo "Getting commits since $LAST_TAG"
            COMMITS=$(git log --oneline --no-merges "$LAST_TAG..HEAD" | sed 's/^/- /')
          else
            echo "No previous tags found, getting last 10 commits"
            COMMITS=$(git log --oneline --no-merges -10 | sed 's/^/- /')
          fi

          # Escape multiline string for GitHub Actions
          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create git tag
        if: steps.version_check.outputs.VERSION_CHANGED == 'true' && steps.release_check.outputs.RELEASE_EXISTS == 'false'
        run: |
          # Check if tag already exists
          if ! git rev-parse "v${{ steps.version_check.outputs.CURRENT_VERSION }}" >/dev/null 2>&1; then
            git tag "v${{ steps.version_check.outputs.CURRENT_VERSION }}"
            git push origin "v${{ steps.version_check.outputs.CURRENT_VERSION }}"
            echo "Created and pushed tag v${{ steps.version_check.outputs.CURRENT_VERSION }}"
          else
            echo "Tag v${{ steps.version_check.outputs.CURRENT_VERSION }} already exists"
          fi

      - name: Create GitHub Release
        if: steps.version_check.outputs.VERSION_CHANGED == 'true' && steps.release_check.outputs.RELEASE_EXISTS == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version_check.outputs.CURRENT_VERSION }}
          name: Release v${{ steps.version_check.outputs.CURRENT_VERSION }}
          body: |
            ## ðŸš€ Release v${{ steps.version_check.outputs.CURRENT_VERSION }}

            ### Docker Images
            - `docker pull groovycodexyz/taschengeld:v${{ steps.version_check.outputs.CURRENT_VERSION }}`
            - `docker pull groovycodexyz/taschengeld:latest`
            - `docker pull groovycodexyz/taschengeld:stable`

            ### Multi-Architecture Support
            - âœ… linux/amd64 (Intel/AMD processors)
            - âœ… linux/arm64 (Apple Silicon, ARM processors)

            ### Changes in this Release
            ${{ steps.commits.outputs.COMMITS }}

            ### Installation
            ```bash
            # Using Docker Compose
            docker pull groovycodexyz/taschengeld:v${{ steps.version_check.outputs.CURRENT_VERSION }}

            # Or use the latest tag
            docker pull groovycodexyz/taschengeld:latest
            ```

            ---
            ðŸ“¦ Version upgraded from v${{ steps.version_check.outputs.PREVIOUS_VERSION }} to v${{ steps.version_check.outputs.CURRENT_VERSION }}
          draft: false
          prerelease: false
          make_latest: true
