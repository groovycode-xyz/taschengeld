name: Build and Push Docker Images

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/theme-system-research.md'
      - 'docs/color-system/**'
      - '.archive/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/theme-system-research.md'
      - 'docs/color-system/**'
      - '.archive/**'
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: groovycodexyz/taschengeld

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate commit size
        run: |
          echo "Checking commit size to prevent CI failures..."
          COMMIT_LINES=$(git show --stat ${{ github.sha }} | grep -E "file.*changed.*insertion.*deletion" | grep -oE '[0-9]+' | head -2 | paste -sd+ | bc || echo "0")
          MAX_LINES=10000

          echo "Commit changes: approximately $COMMIT_LINES lines"

          if [ "$COMMIT_LINES" -gt "$MAX_LINES" ]; then
            echo "‚ùå ERROR: Commit is too large ($COMMIT_LINES lines > $MAX_LINES limit)"
            echo "Large commits can break CI/CD. Please:"
            echo "  1. Check if large files were accidentally committed"
            echo "  2. Ensure logs/ and other artifacts are in .gitignore"
            echo "  3. Consider breaking large changes into smaller commits"
            exit 1
          fi

          echo "‚úÖ Commit size validation passed"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Read version
        id: version
        run: |
          VERSION=$(cat version.txt 2>/dev/null || echo "1.0.0")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
          
          # Check if version tag already exists on DockerHub to determine if this is a new release
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v$VERSION >/dev/null 2>&1; then
            echo "IS_NEW_RELEASE=false" >> $GITHUB_OUTPUT
            echo "Version v$VERSION already exists on DockerHub"
          else
            echo "IS_NEW_RELEASE=true" >> $GITHUB_OUTPUT
            echo "Version v$VERSION is new - will tag as stable"
          fi

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.VERSION }}
            ${{ steps.version.outputs.IS_NEW_RELEASE == 'true' && format('{0}/{1}:stable', env.REGISTRY, env.IMAGE_NAME) || '' }}
          labels: |
            org.opencontainers.image.title=Taschengeld
            org.opencontainers.image.description=Family allowance tracker application
            org.opencontainers.image.version=v${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker image was pushed
        if: github.event_name != 'pull_request'
        run: |
          echo "Verifying Docker images were successfully pushed to registry..."

          # Wait a moment for registry to update
          sleep 10

          # Check if the latest tag exists
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest >/dev/null 2>&1; then
            echo "‚úÖ Latest image verified on DockerHub"
          else
            echo "‚ùå ERROR: Latest image not found on DockerHub"
            exit 1
          fi

          # Check if the version tag exists
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.VERSION }} >/dev/null 2>&1; then
            echo "‚úÖ Version v${{ steps.version.outputs.VERSION }} image verified on DockerHub"
          else
            echo "‚ùå ERROR: Version v${{ steps.version.outputs.VERSION }} image not found on DockerHub"
            exit 1
          fi

          echo "üéâ All Docker images successfully pushed and verified!"

      - name: Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Simple image validation - verify it can start and respond to basic commands
          echo "Testing Docker image basic functionality..."

          # Test that the image contains expected files and Node.js
          # The entrypoint now handles utility commands without requiring DB env vars
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            node --version
          
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ls -la /app
          
          echo "‚úÖ Image validation passed!"

      - name: Test Docker startup with database
        if: github.event_name != 'pull_request'
        run: |
          echo "Testing Docker image startup with fresh database..."

          # Create test environment
          cat > docker-compose.test.yml << 'EOF'
          version: '3.8'
          services:
            app:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              environment:
                - DATABASE_URL=postgresql://postgres:testpass123@db:5432/testdb?schema=public
                - DB_USER=postgres
                - DB_PASSWORD=testpass123
                - DB_HOST=db
                - DB_PORT=5432
                - DB_DATABASE=testdb
                - NODE_ENV=production
              depends_on:
                db:
                  condition: service_healthy
              ports:
                - "3003:3000"
            db:
              image: postgres:16-alpine
              environment:
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=testpass123
                - POSTGRES_DB=testdb
              healthcheck:
                test: ['CMD-SHELL', 'pg_isready -U postgres -d testdb']
                interval: 5s
                timeout: 5s
                retries: 5
                start_period: 10s
          EOF

          # Start test environment
          docker compose -f docker-compose.test.yml up -d

          # Wait for application to be ready
          echo "Waiting for application to start..."
          max_attempts=24  # Reduced from 30 to 24 (2 minutes total)
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -s -f http://localhost:3003/api/health >/dev/null 2>&1; then
              echo "‚úÖ Application startup test passed!"
              break
            fi
            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts - waiting for application..."
            sleep 5
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "‚ùå Application startup test failed - logs:"
            docker compose -f docker-compose.test.yml logs app
            docker compose -f docker-compose.test.yml down
            exit 1
          fi

          # Verify API endpoints
          echo "Testing API endpoints..."
          if curl -s http://localhost:3003/api/health | grep -q '"status":"ok"'; then
            echo "‚úÖ Health endpoint working"
          else
            echo "‚ùå Health endpoint failed"
            docker compose -f docker-compose.test.yml logs app
            docker compose -f docker-compose.test.yml down
            exit 1
          fi

          # Test version endpoint
          if curl -s http://localhost:3003/api/version | grep -q '"version"'; then
            echo "‚úÖ Version endpoint working"
          else
            echo "‚ùå Version endpoint failed"
          fi

          # Clean up
          docker compose -f docker-compose.test.yml down
          rm -f docker-compose.test.yml

          echo "üéâ Docker startup verification completed successfully!"

      - name: Update Docker Hub description
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        continue-on-error: true
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md

      - name: Report build failure
        if: failure() && github.event_name != 'pull_request' && (steps.docker_build.outcome == 'failure' || steps.version.outcome == 'failure')
        run: |
          echo "üö® DOCKER BUILD FAILURE DETECTED üö®"
          echo ""
          echo "Build failed for:"
          echo "  Repository: ${{ github.repository }}"
          echo "  Branch: ${{ github.ref_name }}"
          echo "  Commit: ${{ github.sha }}"
          echo "  Version: ${{ steps.version.outputs.VERSION }}"
          echo "  Trigger: ${{ github.event_name }}"
          echo ""
          echo "This means new Docker images were NOT pushed to DockerHub!"
          echo "Users pulling 'latest' will get outdated images without recent fixes."
          echo ""
          echo "üîß Troubleshooting steps:"
          echo "  1. Check GitHub Actions logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "  2. Verify DockerHub credentials are valid"
          echo "  3. Check for large commits (>10k lines) that break CI"
          echo "  4. Manually trigger release workflow if needed"
          echo ""
          echo "üìã Quick manual fix:"
          echo "  gh workflow run release.yml --ref main"

          # Set exit code to mark this as a warning, not failure
          exit 0
