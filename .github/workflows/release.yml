name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  REGISTRY: docker.io
  IMAGE_NAME: groovycodexyz/taschengeld

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Validate repository state
        run: |
          echo "Validating repository state for release..."

          # Check for uncommitted large files
          LARGE_FILES=$(find . -name "*.log*" -size +1M 2>/dev/null | head -5)
          if [ -n "$LARGE_FILES" ]; then
            echo "‚ö†Ô∏è  WARNING: Found large log files that could break CI:"
            echo "$LARGE_FILES"
            echo "These should be in .gitignore"
          fi

          # Check .gitignore has required entries
          if ! grep -q "^logs/" .gitignore; then
            echo "‚ùå ERROR: .gitignore missing 'logs/' entry"
            exit 1
          fi

          echo "‚úÖ Repository state validation passed"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Extract version from release tag (remove 'v' prefix if present)
            VERSION="${{ github.event.release.tag_name }}"
            VERSION=${VERSION#v}
          else
            # Manual workflow dispatch - increment version
            CURRENT_VERSION=$(cat version.txt 2>/dev/null || echo "1.0.0")
            echo "Current version: $CURRENT_VERSION"
            
            # Parse version components
            IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
            
            case "${{ github.event.inputs.version_type }}" in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                ;;
              patch)
                patch=$((patch + 1))
                ;;
            esac
            
            VERSION="$major.$minor.$patch"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "New version: $VERSION"

      - name: Update version file
        run: |
          echo "${{ steps.version.outputs.VERSION }}" > version.txt
          echo "Updated version.txt to ${{ steps.version.outputs.VERSION }}"

      - name: Build and push release images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          labels: |
            org.opencontainers.image.title=Taschengeld
            org.opencontainers.image.description=Family allowance tracker application
            org.opencontainers.image.version=v${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify release image
        run: |
          echo "Verifying release image availability..."

          # Simple verification that images were pushed successfully
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.VERSION }} >/dev/null 2>&1; then
            echo "‚úÖ Release image v${{ steps.version.outputs.VERSION }} verified on DockerHub"
          else
            echo "‚ùå ERROR: Release image v${{ steps.version.outputs.VERSION }} not found on DockerHub"
            exit 1
          fi

          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest >/dev/null 2>&1; then
            echo "‚úÖ Latest image verified on DockerHub"
          else
            echo "‚ùå ERROR: Latest image not found on DockerHub"
            exit 1
          fi

          echo "üéâ Release image verification completed successfully!"
          echo "üìã Images available:"
          echo "  - docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.VERSION }}"
          echo "  - docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo ""
          echo "Note: Comprehensive testing is performed in docker-build.yml workflow"

      - name: Commit version update
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.txt
          git commit -m "üîñ Bump version to v${{ steps.version.outputs.VERSION }}"
          git tag "v${{ steps.version.outputs.VERSION }}"
          git push origin HEAD --tags

      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: Release v${{ steps.version.outputs.VERSION }}
          body: |
            ## üöÄ Release v${{ steps.version.outputs.VERSION }}

            ### Docker Images
            - `docker pull groovycodexyz/taschengeld:v${{ steps.version.outputs.VERSION }}`
            - `docker pull groovycodexyz/taschengeld:latest`
            - `docker pull groovycodexyz/taschengeld:stable`

            ### Multi-Architecture Support
            - ‚úÖ linux/amd64 (Intel/AMD processors)
            - ‚úÖ linux/arm64 (Apple Silicon, ARM processors)

            ### Changes
            - Version bump from manual release workflow

            ---
            ü§ñ Generated with [Claude Code](https://claude.ai/code)
          draft: false
          prerelease: false

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md
